Instalación de Webpack y construcción del proyecto

1. Clonar el proyecto: 
git clone https://github.com/gndx/js-portfolio.git

2. Instalar webpack con npm:
npm install webpack webpack-cli -D 

3. Webpack en modo production:
npx webpack --mode production

----------------------------------------

Configuración de webpack.config.js

El archivo de configuración nos va ayudar a poder establecer la configuración y elementos que vamos a utilizar.

Para poder crear el archivo de configuración en la raíz del proyecto creamos un archivo llamado: webpack.config.js
En el mismo debemos decir:
- El punto de entrada:
- Hacia a donde enviar la configuración de nuestro proyecto (lo que va a preparar webpacks)
- Las extensioens que vamos a usar

Luego en terminal indicamos donde estará el archivo de configuración:
npx webpack --mode production --config webpack.config.js

Para poder hacerlo más amigable el comando se puede crear un script en package.json:
"scripts": {
		...
    "build": "webpack --mode production"
},
Nota: actualmente no es necesario añadir el flag --config webpack.config.js ya que es el archivo que detecta por defecto, 
entonces basta con hacer npx webpack --mode production

----------------------------------------

Babel Loader para JavaScript

Babel te permite hacer que tu código JavaScript sea compatible con todos los navegadores.

Debes agregar a tu proyecto las siguientes dependencias:
npm install babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime -D 
- babel-loader nos permite usar babel con webpack
- @babel/core es babel en general
- @babel/preset-env trae y te permite usar las ultimas características de JavaScript
- @babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await

Luego debes crear el archivo de configuración de babel el cual tiene como nombre .babelrc:
{
  "presets": [
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/plugin-transform-runtime"
  ]
}

Para comenzar a utilizar webpack debemos agregar la siguiente configuración en webpack.config.js:
{
...,
module: {
    rules: [
      {
        // Test declara que extensión de archivos aplicara el loader
        test: /\.js$/,
        // Use es un arreglo u objeto donde dices que loader aplicaras
        use: {
          loader: "babel-loader"
        },
        // Exclude permite omitir archivos o carpetas especificas
        exclude: /node_modules/
      }
    ]
  }
}
Nota: se quito la etiqueta <script> del template ya que luego webpack lo agrega.

En resumen Babel te ayuda a transpilar el código JavaScript, a un resultado el cual todos los navegadores lo puedan entender y 
ejecutar. Tra "extensiones" o plugins los cuales nos permiten tener características más allá del JavaScript común.

----------------------------------------

HTML en Webpack

Para trabajar con HTML en Webpack tenemos que agregar el siguiente plugin:
npm install html-webpack-plugin -D 

Luego editamos el archivo webpack.config.js para trabajar con HTML agregando: 
const HtmlWebpackPlugin = require("html-webpack-plugin");
{
...,
plugins: [
    new HtmlWebpackPlugin({
      inject: true,
      template: './public/index.html', // entrada
      filename: './index.html' // salida
    })
  ]
}

Finalmente transpilamos con Webpack:
npx webpack --mode production // npm run build (script de package.json)

Tambien podemos agregar el siguiente script en package.json para cambiar a --mode development de una forma sencilla:
"scripts": {
		...
    "dev": "webpack --mode development"
},

----------------------------------------

Loaders para CSS y preprocesadores de CSS

Para dar soporte a CSS en webpack debes instalar los siguientes paquetes:
npm install mini-css-extract-plugin css-loader -D
- css-loader es un loader para reconocer CSS
- mini-css-extract-plugin extrael el CSS en archivos

Si queremos incluir un preprocedaro de CSS como styus:
- npm install stylus-loader -D

Para comenzar debemos agregar las configuraciones de webpack:
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
module.exports = {
	...,
	module: {
    rules: [
      {
        test: /\.css|styl$/i,
        use: [
          MiniCssExtractPlugin.loader,
          "css-loader",
          "stylus-loader"
        ]
      }
    ]
  },
  plugins: [
		...
    new MiniCssExtractPlugin(),
  ]
}
Nota: es importante importar los styles en index.js y retirar la etiqueta <link> del template ya que luego webpack lo agrega.

Finalmente con webpack:
npmx webpack --mode development / npx webpack --mode production

En resumen puedes dar soporte a CSS en webpack mediante loaders y plugins, además que puedes dar superpoderes al mismo con las 
nuevas herramientas conocidas como preprocesadores y post procesadores.

Loaders
Fuera de contexto, webpack solamente entiende JavaScript y JSON. Los loaders nos permite procesar archivos de otros tipos para 
convertirnos en módulos válidos que serán consumidos por nuestras aplicaciones y agregadas como dependencias.

En alto nivel, los loaders poseen 2 configuraciones principales:
- test - propiedad que identifica cuáles archivos deberán ser transformados
- use - propiedad que identifica el loader que será usado para transformar a dichos archivos

Plugins
Mientras los loaders transforman ciertos tipos de módulos, los plugins _son utilizados para extender tareas específicas, como 
la optimización de paquetes, la gestión de activos y la inyección de variables de entorno.

Una vez importado el plugin, podemos desear el personalizarlos a través de opciones.

----------------------------------------

Copia de archivos con Webpack

Si tienes la necesidad de mover archivos o directorios a tu proyecto final podemos usar un plugin. Para instalarlo debemos 
ejecutar el comando:
npm install copy-webpack-plugin -D 

Luego para poder comenar a usarlo debemos agregar las configuraciones a webpack.config.js
...
const CopyPlugin = require('copy-webpack-plugin');
module.exports = {
	...
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, "src", "assets/images"),
          to: "assets/images"
        }
      ]
    }),
  ]
}

Es importaten las propiedades:
- from indica que recurso (archivo o directorio) deseamos copiar al directorio final
- to indica en que ruta dentro de la carpeta final terminaran los recursos

Finalmente con webpack:
npmx webpack --mode development / npx webpack --mode production
Nota: tambien es importante en el template cambiar los src de los elementos ya que la ruta de acceso posteriormente cambiara a 
la carpeta de dist y podrían no mostrarce de no hacerlo.

----------------------------------------

Loaders de imágenes

Puedes usar una forma de importar las imágenes haciendo un import de las mismas y generando una variable.

No es necesario instalar ninguna dependecia, webpack ya lo tiene uncluido, debemos agregar la siguiente configuración:
module.exports = {
	...
  module: {
    rules: [
      {
        test: /\.png/,
        type: "asset/resource"
      }
    ]
  },
}

Para empezar a usar eta configuración debemos importar las imagenes de la siguiente forma (Template.js):
import github from '../assets/images/github.png';
import twitter from '../assets/images/twitter.png';
import instagram from '../assets/images/instagram.png';
...
...
<div class="card_social">
  <a href="https://twitter.com/gndx">
    <img src="${twitter}" />
  </a>
  <a href="https://github.com/gndx">
    <img src="${github}" />
  </a>
  <a href="https://instagram.com/gndx">
    <img src="${instagram}" />
  </a>
</div>
Nota: ver ejemplo en archivo Template.js.

Finalmente con webpack:
npmx webpack --mode development / npx webpack --mode production

----------------------------------------

Loaders de fuentes

Cuando utilizamos fuentes externas una buena práctica es descargarlas a nuestro proyeco. Debido a que no hara un llamado a otros 
sitios. Por ellos es importante usarlo dentro de webpack.

Para esta tarea instalaras y usaras: 
npm install url-loader file-loader -D 

Para aplicar esta configuración debes agregar la siguiente información:
module.exports = {
	...
  module: {
    rules: [
			...
      {
        test: /\.(woff|woff2)$/,
        use: {
          loader: "url-loader",
          options: {
            // limit => limite de tamaño
            limit: 10000,
            // Mimetype => tipo de dato
            mimetype: "application/font-woff",
            // name => nombre de salida
            name: "[name].[ext]",
            // outputPath => donde se va a guardar en la carpeta final
            outputPath: "./assets/fonts/",
            publicPath: "./assets/fonts/",
            esModule: false,
          }
        }
      }
    ]
  },
	...
}

Es importante que dentro de los estilos agregues la fuente: 
@font-face {
	font-family: "Ubuntu";
	src: url("../assets/fonts/ubuntu-regular.woff2") format('woff2'),
			 url("../assets/fonts/ubuntu-regular.woff") format('woff');
	font-weight: 400;
	font-style: normal;
}

Nota: tambien se agrego la siguiente linea de código.
module.exports = {
  entry: "./src/index.js",
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "main.js",
    assetModuleFilename: 'assets/images/[hash][ext][query]' // código adicional
  },
  ...
}

Finalmente con webpack:
npmx webpack --mode development / npx webpack --mode production

----------------------------------------

Optimización: hashes, compresión y minificación de archivos

Unas de las razones por que utilizamos webpack es porque nos permite optimizar y comprimir nuestro proyecto.

Debes utilizar los siguientes paquetes: 
npm install css-minimizer-webpack-plugin terser-webpack-plugin -D
- css-minimizer-webpack-plugin nos ayuda a comprimir nuestros archivos finales CSS.
- terser-webpack-plugin permite minificar de una mejor forma.

Una vez instalado el plugin debemos agregar la siguiente configuración (webpack.config.js): 
...
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
module.exports = {
	...
	optimization: {
    minimize: true,
    minimizer: [
      new CssMinimizerPlugin(),
      new TerserPlugin()
    ]
  }
}

Cuando nombremos en la configuración de webpack es importante usar [contenthash] para evitar problemas con la cache.

Finalmente con webpack:
npmx webpack --mode development
npx webpack --mode production

¿Por qué es importante usar Hashes en nuestros archivos?
Los recursos que se guardan en memoria cache suceden cuando el navegador entra a un sitio por primera vez y los guarda. Por ello 
la siguiente vez sera mucho más rápido por que estarán en memoria. La desventaja esta cuando sacamos una nueva versión, porque 
tendrán un mismo nombre evitando que se descargue los nuevos cambios, por lo tanto, el usuario no recibirpa los nuevos cambios. 
Para que no haya conflicto con la cache una vez que tengamos nuestro proyecto producción es importante darles un hash para cada 
nueva versión.

----------------------------------------

Webpack Alias

Alias nos permiten otorgar nombres paths específicos evitando los paths largos. 

Para crear un alias debes agregar la siguiente configuración a webpack:
module.exports = {
	...
	resolve: {
		...
    alias: {
      '@nombreDeAlias': path.resolve(__dirname, 'src/<directorio>'),
    },
	}
}

Puedes usarlo en los imports de la siguiente manera: 
import modulo from "@ejemplo/archivo.js";

Alias forma parte del objeto resolve el cual nos permite configurar la forma en que webpack resolverá los módulos incorporados.

Finalmente con webpack:
npmx webpack --mode development
npx webpack --mode production

----------------------------------------

Variables de entorno

Es importante considerar las variables de entorno, va a ser un espacio seguro donde podemos guardar datos sensibles. Por ejemplo, 
subir llaves al repositorio no es buena idea cuando tienes un proyecto open source.

Para instar debemos correr el comando y agregar la dependencia:
npm install dotenv-webpack -D

Posteriormente debemos crear un archivo .env donde estarán la clave para acceder a la misma y el valor que contendrán:
# Ejemplo
API=https://randomuser.me/api/
Nota: dicho archivo no se sube a ningún repositorio, solo debe exitir de manera local y se solicita al encargado correspondiente.

Es buena idea tener un archivo de ejemplo donde el mismo sí se puede subir al respositorio como muestra de que campos van a ir.

Una vez creado el archivo .env debemos agregar la siguiente configuración en webpack.config.js
...
const Dotenv = require('dotenv-webpack');
module.exports = {
	...
	plugins: [
		new Dotenv()
  ],
}

dotenv-webpack leera el archivo .env por defecto y lo agrega a nuestro proyecto. Para usarlas debes hacer lo siguiente:
const nombre = process.env.NOMBRE_VARIABLE; // ver ejemplo en archivo getData.js

Toda la configuración se podrá acceder desde process.env
Finalmente con webpack:
npmx webpack --mode development
npx webpack --mode production

Lasa variables de entorno son variables externas a nuestra aplicación que residen en el sistema operativo o en el contendor de la 
aplicación que se está ejecutando. Una variable de entorno es simplemente un nombre asignado a un valor como una variable en 
cualquier lenguaje de programación.
https://www.victorvr.com/tutorial/variables-de-entorno-con-nodejs

----------------------------------------

Webpack en modo desarrollo

Para usar de mejor manera el modo de desarrollo creamos un archivo llamado webpack.config.dev.js en el cual copiamos lo que 
tenemos en el archivo webpack.config.js. Luego podemos dejar solo lo que necesitemos para cuando estemos desarrollando nuestra 
aplicación, por ejemplo podemos retirar la siguiente configuración: 
// No necesitamos optimizar por tanto lo retiramos
optimization: {
  minimize: true,
  minimizer: [
      new CssMinimizerPlugin(),
      new TerserPlugin()
  ]
}
// También borramos 
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin')

Por ultimo podemos añadir el atributo para indicar el modo en el cual trabajaremos:
output: {
  ...
},
mode: 'development',

Luego necesitamos cambiar la configuración en package.json: 
"dev": "webpack --config webpack.config.dev.js" 

Finalmente ejecutamos: 
npm run dev

----------------------------------------

Webpack en modo producción

Actualmente tenemos el problema de tener varios archivos repetidos los cuales se fueron acumulando por compilaciones anteriores. 
Para ello puedes limpiar la carpeta cada vez que hacemos un build, usando clean-webpack-plugin. Cabe recalcar que esta 
característica es mucho más util para la configuración de producción.

Para instalarlo debemos correr el siguiente comando: 
npm install clean-webpack-plugin -D 

Para agregarlo a nuestra configuración de webpack agregamos los siguientes cambios a webpack.config.js (este es el archivo 
destinado para producción, de esta forma tenemos separados el modo development y production):
...
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
module.exports = {
	...
	plugins: [
		...
		new CleanWebpackPlugin()
	]
}

Finalmente ejecutamos: 
npm run build 

----------------------------------------

Webpack Watch 

El modo watch hace que nuestro proyecto se compile de forma automática, es decir que está atento a cambios.

Para habilitarlo debemos agregar lo siguiente en la configuración de webpack: 
module.exports = {
	...
	watch: true
}
// para este proyecto se configuro el archivo webpack.config.dev.js pero se puede configurar según sea el caso o necesitemos 

Cada vez que haya un cambio hara un build automático.

Otra manera es mandar la opción mediante parámetros de consola en package.json: 
{
	"scripts": {
		"dev:watch": "webpack --config webpack.config.dev.js --watch"
	}
}

Vale la pena recordar que si aplicamos en modo producción se tomara más tiempo porque se optimizaran los recursos, por ello en 
modo desarrollo se salta ese paso y es más rápido la compilación.

